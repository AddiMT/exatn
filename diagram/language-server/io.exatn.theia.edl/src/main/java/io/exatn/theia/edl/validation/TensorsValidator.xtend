/*
 * generated by Xtext 2.16.0
 */
package io.exatn.theia.edl.validation

import com.google.common.collect.Multimaps
import io.exatn.theia.edl.tensors.TensorDiagram
import io.exatn.theia.edl.tensors.TensorsPackage
import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
@@ -11,15 +15,35 @@ package io.exatn.theia.edl.validation
 */
class TensorsValidator extends AbstractTensorsValidator {
	
	@Check
	def checkTensor(io.exatn.theia.edl.tensors.Tensor tensor) {
		val Dimension2Operation = Multimaps.index(tensor.operations, [dimension.name ?: ''])
		Dimension2Operation.keySet.forEach [ name |
			val OperationsWithCommonName = Dimension2Operation.get(name)
			if (OperationsWithCommonName.size > 1) 
				OperationsWithCommonName.forEach [
					error('''Multiple operations on dimension «name»''', it, TensorsPackage.Literals.Operation__Dimension)
			]
		]
	}
	
	@Check
	def checkUniqueNames(TensorDiagram sm) {
		val name2Tensor = Multimaps.index(sm.tensors, [name ?: ''])
		name2Tensor.keySet.forEach [ name |
			val TensorsWithCommonName = name2Tensor.get(name)
			if (TensorsWithCommonName.size > 1) 
				TensorsWithCommonName.forEach [
					error('''Multiple tensors named '«name»'«»''', it, TensorsPackage.Literals.Tensor__NAME)
			]
		]
		val name2Dimension = Multimaps.index(sm.dimensions, [name ?: ''])
		name2Dimension.keySet.forEach [ name |
			val DimensionsWithCommonName = name2Dimension.get(name)
			if (DimensionsWithCommonName.size > 1) 
				DimensionsWithCommonName.forEach [
					error('''Multiple dimensions named '«name»'«»''', it, TensorsPackage.Literals.Dimension__NAME)
			]
		]
	}
}
